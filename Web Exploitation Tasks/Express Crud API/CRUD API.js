const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();

const app = express();
const port = 2220;

app.use(bodyParser.json());

let query;

// Connect to DB
const db = new sqlite3.Database('C:\\Users\\misha\\Desktop\\Important Stuff\\Databases\\CRUD.db', sqlite3.OPEN_READWRITE);

// console.log is used for printing in terminal
// Browsers can only use get requests

//Homepage
app.get('/', (req, res) => {
    console.log ('Reached Hompage');
    res.send ('Homepage');
});

// Creating a record
app.post('/books', (req, res) => {

    const { id, title, author } = req.body;
    console.log(id);

    if (!id || !title || !author) {
        return res.status(400).send('Id, Title, and Author are required');
    }

    query = 'INSERT INTO books (id, title, author) VALUES (?, ?, ?)';

    db.run(query, [id, title, author], (err) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error creating book record');
        }

        console.log ("Book added");
        res.status(200).send('Book added successfully')
    });
});

// Reading all records
app.get('/books', (req, res) => {
    query = 'SELECT * FROM BOOKS';
    db.all(query, (err, rows) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error displaying book records');
        }

        console.log ("Displayed all rows");
        res.status(200);
        res.json(rows);
    });
});

// Update record
app.put('/books/:id', (req, res) => {

    const bID = parseInt(req.params.id);

    const { title, author } = req.body;

    const updateData = [];

    const lettersAndNumbersPattern = /^[A-Za-z0-9]+$/;

    // Added code to check for special characters to prevent sqli
    if(!title.match(lettersAndNumbersPattern) || !author.match(lettersAndNumbersPattern)) {
        return res.status(400).json({ err: "No special characters please!"});
    }

    if (title) updateData.push(`title = '${title}'`);
    if (author) updateData.push(`author = '${author}'`);

    query = `UPDATE books SET ${updateData.join(', ')} WHERE id = ?`;

    db.run (query, [bID], (err) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error updating book record');
        }

        console.log(`Book updated`);
        res.status(200).send('Book updated successfully');
    });
});

// Delete record
app.delete ('/books/:id', (req, res) => {
    
    const bID = parseInt(req.params.id);
    query = 'DELETE FROM books WHERE id = ?';

    db.run (query, [bID], (err) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error deleting book record');
        }

        console.log('Book deleted');
        res.status(200).send('Book deleted successfully');
    });
});

app.listen(port, () => {
    console.log(`Server running on port: http://localhost:${port}`);
});